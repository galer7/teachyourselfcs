#lang sicp

; Exercise 1.15
; The sine of an angle (specified in radians) can be computed by making use of the approximation sin x ~= x if x is sufficiently small, and the trigonometric identity
;
; sin x = 3 sin x/3 - 4 (sin x/3)^3
;
; to reduce the size of the argument of sin.
; (For purposes of this exercise an angle is considered ``sufficiently small'' if its magnitude is not greater than 0.1 radians.)
; These ideas are incorporated in the following procedures:


(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))

; a. How many times is the procedure p applied when (sine 12.15) is evaluated?
; b. What is the order of growth in space and number of steps (as a function of a) used by the process generated by the sine procedure when (sine a) is evaluated?

; a. 5 times

; sine 12.15
; (p (sine 4.05))                 ; 1
; (p (p (sine 1.35)))             ; 2
; (p (p (p (sine 0.45))))         ; 3
; (p (p (p (p (sine 0.15)))))     ; 4
; (p (p (p (p (p (sine 0.05)))))) ; 5

; b. We divide the angle by 3 each time, so the number of steps is log3(a).
; The space is also log3(a) because, each recursive call needs constant space, but we have log3(a) calls.
; => space: O(log3(a)), steps: O(log3(a))